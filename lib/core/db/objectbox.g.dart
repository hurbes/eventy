// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../core/models/event/event.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2928687770817607810),
      name: 'AllowedSorts',
      lastPropertyId: const obx_int.IdUid(6, 5273760538409436188),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9069803489093101874),
            name: 'id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6148380538155288732),
            name: 'startDateId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 7106166498546036636),
            relationTarget: 'CreatedAt'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8950865401940051349),
            name: 'endDateId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 8268702741961739791),
            relationTarget: 'CreatedAt'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5501575182824276094),
            name: 'createdAtId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 1849408392072501782),
            relationTarget: 'CreatedAt'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2742527401940068308),
            name: 'updatedAtId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 3048537348527404106),
            relationTarget: 'CreatedAt'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5273760538409436188),
            name: 'objId',
            type: 6,
            flags: 129)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 26018418449146006),
      name: 'CreatedAt',
      lastPropertyId: const obx_int.IdUid(4, 1545402386686713801),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5199060476417728201),
            name: 'id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3454706274988347775),
            name: 'asc',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 717358473484116422),
            name: 'desc',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1545402386686713801),
            name: 'objId',
            type: 6,
            flags: 129)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1061161746570172076),
      name: 'Event',
      lastPropertyId: const obx_int.IdUid(13, 808041214050667083),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8315099447639015403),
            name: 'id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 696313777680279365),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2410031230226129065),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4242634541109531530),
            name: 'startDate',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5813781055337756876),
            name: 'endDate',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1119175513203787151),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5523503665349436354),
            name: 'lifecycleStatus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8904515387993840336),
            name: 'currency',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8501399565653133573),
            name: 'timezone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6654455666057463772),
            name: 'slug',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3437884547947728068),
            name: 'settingsId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 8600329083120366072),
            relationTarget: 'Settings'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 64125224767496059),
            name: 'organizerId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 10862572618913348),
            relationTarget: 'Organizer'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 808041214050667083),
            name: 'objId',
            type: 6,
            flags: 129)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 515576437394905215),
            name: 'images',
            targetId: const obx_int.IdUid(4, 7562423902453322177)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(5, 2111035307468602959),
            name: 'tickets',
            targetId: const obx_int.IdUid(12, 3361063440599023220))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 7562423902453322177),
      name: 'EventImage',
      lastPropertyId: const obx_int.IdUid(7, 4736021858158975148),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2347933403664218795),
            name: 'id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1377948667310913879),
            name: 'url',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 23367236891779879),
            name: 'size',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7010011738239830186),
            name: 'fileName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 604895904656542596),
            name: 'mimeType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 100363335404442308),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4736021858158975148),
            name: 'objId',
            type: 6,
            flags: 129)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 4576235563564197345),
      name: 'EventResponse',
      lastPropertyId: const obx_int.IdUid(4, 1138829507336921340),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5639544999503914119),
            name: 'id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 966871540494875497),
            name: 'linksId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 8064055041283012244),
            relationTarget: 'Links'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5041821746205871079),
            name: 'metaId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(8, 6055139088912686113),
            relationTarget: 'Meta'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1138829507336921340),
            name: 'objId',
            type: 6,
            flags: 129)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 3424750710090371567),
            name: 'data',
            targetId: const obx_int.IdUid(3, 1061161746570172076))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 5460972329972069359),
      name: 'Link',
      lastPropertyId: const obx_int.IdUid(5, 9010190610636283060),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6544372238944025720),
            name: 'id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4419229562840858597),
            name: 'url',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6097008421237417605),
            name: 'label',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7682470161516960883),
            name: 'active',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9010190610636283060),
            name: 'objId',
            type: 6,
            flags: 129)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 1597462534855790662),
      name: 'Links',
      lastPropertyId: const obx_int.IdUid(6, 4938765816382733822),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3625103007552380423),
            name: 'id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8560721502625559041),
            name: 'first',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1348688338921199575),
            name: 'last',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3817038126387483743),
            name: 'prev',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4062807434877088902),
            name: 'next',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4938765816382733822),
            name: 'objId',
            type: 6,
            flags: 129)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 6766829613464600686),
      name: 'LocationDetails',
      lastPropertyId: const obx_int.IdUid(9, 7303537970776845063),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5750997160408308348),
            name: 'id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2354641694232569179),
            name: 'city',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5037131086384433599),
            name: 'country',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1121599067177193840),
            name: 'venueName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 605056644838135801),
            name: 'addressLine1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6042799775186083570),
            name: 'addressLine2',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7024626164503566804),
            name: 'stateOrRegion',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 903831348653710984),
            name: 'zipOrPostalCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7303537970776845063),
            name: 'objId',
            type: 6,
            flags: 129)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 3252084966837288638),
      name: 'Meta',
      lastPropertyId: const obx_int.IdUid(13, 1034196012120705540),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2961956291626109485),
            name: 'id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3458370265323779365),
            name: 'currentPage',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4520846961734215200),
            name: 'from',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7461259710251776641),
            name: 'lastPage',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 765675038933905560),
            name: 'path',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3468225457899613484),
            name: 'perPage',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3834045826821823222),
            name: 'to',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5048114185735840228),
            name: 'total',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7070980289075245366),
            name: 'allowedSortsId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(9, 7315891623666561296),
            relationTarget: 'AllowedSorts'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6757369367130221253),
            name: 'defaultSort',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5486574847200941220),
            name: 'defaultSortDirection',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3158491970831315021),
            name: 'allowedFilterFields',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1034196012120705540),
            name: 'objId',
            type: 6,
            flags: 129)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 8037609308355931107),
            name: 'links',
            targetId: const obx_int.IdUid(6, 5460972329972069359))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 7089825904452947869),
      name: 'Organizer',
      lastPropertyId: const obx_int.IdUid(9, 8029007779180256672),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7854683108529447848),
            name: 'id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3055073116544664888),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6222012567466377773),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6190393619698608203),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4496168645437060766),
            name: 'website',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 830100524226321892),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1245034921023123498),
            name: 'timezone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8451268115694468806),
            name: 'currency',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8029007779180256672),
            name: 'objId',
            type: 6,
            flags: 129)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 3799377972835643350),
      name: 'Settings',
      lastPropertyId: const obx_int.IdUid(29, 1109022384677114651),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3754556816792497043),
            name: 'id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3474228105427575641),
            name: 'preCheckoutMessage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8701560242767123957),
            name: 'postCheckoutMessage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8665068144937868741),
            name: 'ticketPageMessage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1588186065847423716),
            name: 'continueButtonText',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1199232897065550812),
            name: 'requiredAttendeeDetails',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4977615360071696175),
            name: 'emailFooterMessage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 853594907444990063),
            name: 'supportEmail',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1470524198485480053),
            name: 'orderTimeoutInMinutes',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8157557103000515234),
            name: 'homepageBodyBackgroundColor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5739226205066767164),
            name: 'homepageBackgroundColor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3794375405803488125),
            name: 'homepagePrimaryColor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 6701000148298187176),
            name: 'homepagePrimaryTextColor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6884120695721647027),
            name: 'homepageSecondaryColor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8374490094373595125),
            name: 'homepageSecondaryTextColor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 860169291637390930),
            name: 'homepageBackgroundType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 3677732151373596040),
            name: 'websiteUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 9172149943989597428),
            name: 'mapsUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 7866358766711609896),
            name: 'locationDetailsId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(10, 8443405537350574685),
            relationTarget: 'LocationDetails'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 6332405842978268351),
            name: 'isOnlineEvent',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 8461876755313022680),
            name: 'onlineEventConnectionDetails',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 488829471346546282),
            name: 'seoTitle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 1496489772366242840),
            name: 'seoDescription',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 362512574989491514),
            name: 'seoKeywords',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 5626735585715345386),
            name: 'allowSearchEngineIndexing',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 2302809763778535730),
            name: 'notifyOrganizerOfNewOrders',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 7406198598050862437),
            name: 'priceDisplayMode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 3447279502487116253),
            name: 'hideGettingStartedPage',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 1109022384677114651),
            name: 'objId',
            type: 6,
            flags: 129)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 3361063440599023220),
      name: 'Ticket',
      lastPropertyId: const obx_int.IdUid(16, 5767843473786288769),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2139809133449553096),
            name: 'objId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4929718348661318091),
            name: 'id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5290623083594660400),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 205595219539729992),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2351819754740568480),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2861363998244511437),
            name: 'maxPerOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2461299595507731822),
            name: 'minPerOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8102328912233820949),
            name: 'saleStartDate',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6068008266873906401),
            name: 'saleEndDate',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5571616562138433161),
            name: 'eventId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3546994262305574512),
            name: 'isBeforeSaleStartDate',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 214200492901788912),
            name: 'isAfterSaleEndDate',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1086619985057026505),
            name: 'quantityAvailable',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 5580291711497727534),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 3057239627746289131),
            name: 'isAvailable',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 5767843473786288769),
            name: 'isSoldOut',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(4, 5857954840408047277),
            name: 'prices',
            targetId: const obx_int.IdUid(13, 799067579399403885))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 799067579399403885),
      name: 'TicketPrice',
      lastPropertyId: const obx_int.IdUid(16, 1435773152165124100),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4707503047477079274),
            name: 'objId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2723124642311002689),
            name: 'id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4712909740479518579),
            name: 'label',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 359588582104431674),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8256978274880165248),
            name: 'saleStartDate',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 512181437394372820),
            name: 'saleEndDate',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6964957283742571884),
            name: 'priceIncludingTaxesAndFees',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5789689339554339387),
            name: 'priceBeforeDiscount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4807942621373375517),
            name: 'isDiscounted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1374836246624856561),
            name: 'taxTotal',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 9012351717138883537),
            name: 'feeTotal',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5758966580938900618),
            name: 'isBeforeSaleStartDate',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5900005722219907436),
            name: 'isAfterSaleEndDate',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 234998090110260020),
            name: 'isAvailable',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 4336760304103119449),
            name: 'isSoldOut',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 1435773152165124100),
            name: 'quantityRemaining',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(13, 799067579399403885),
      lastIndexId: const obx_int.IdUid(10, 8443405537350574685),
      lastRelationId: const obx_int.IdUid(5, 2111035307468602959),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AllowedSorts: obx_int.EntityDefinition<AllowedSorts>(
        model: _entities[0],
        toOneRelations: (AllowedSorts object) => [
              object.startDate,
              object.endDate,
              object.createdAt,
              object.updatedAt
            ],
        toManyRelations: (AllowedSorts object) => {},
        getId: (AllowedSorts object) => object.objId,
        setId: (AllowedSorts object, int id) {
          object.objId = id;
        },
        objectToFB: (AllowedSorts object, fb.Builder fbb) {
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.startDate.targetId);
          fbb.addInt64(2, object.endDate.targetId);
          fbb.addInt64(3, object.createdAt.targetId);
          fbb.addInt64(4, object.updatedAt.targetId);
          fbb.addInt64(5, object.objId ?? 0);
          fbb.finish(fbb.endTable());
          return object.objId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final startDateParam = obx.ToOne<CreatedAt>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final endDateParam = obx.ToOne<CreatedAt>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final createdAtParam = obx.ToOne<CreatedAt>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final updatedAtParam = obx.ToOne<CreatedAt>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = AllowedSorts(
              objId: objIdParam,
              id: idParam,
              startDate: startDateParam,
              endDate: endDateParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          object.startDate.attach(store);
          object.endDate.attach(store);
          object.createdAt.attach(store);
          object.updatedAt.attach(store);
          return object;
        }),
    CreatedAt: obx_int.EntityDefinition<CreatedAt>(
        model: _entities[1],
        toOneRelations: (CreatedAt object) => [],
        toManyRelations: (CreatedAt object) => {},
        getId: (CreatedAt object) => object.objId,
        setId: (CreatedAt object, int id) {
          object.objId = id;
        },
        objectToFB: (CreatedAt object, fb.Builder fbb) {
          final ascOffset = fbb.writeString(object.asc);
          final descOffset = fbb.writeString(object.desc);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, ascOffset);
          fbb.addOffset(2, descOffset);
          fbb.addInt64(3, object.objId ?? 0);
          fbb.finish(fbb.endTable());
          return object.objId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final ascParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final objIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = CreatedAt(
              id: idParam, asc: ascParam, desc: descParam, objId: objIdParam);

          return object;
        }),
    Event: obx_int.EntityDefinition<Event>(
        model: _entities[2],
        toOneRelations: (Event object) => [object.settings, object.organizer],
        toManyRelations: (Event object) => {
              obx_int.RelInfo<Event>.toMany(1, object.objId!): object.images,
              obx_int.RelInfo<Event>.toMany(5, object.objId!): object.tickets
            },
        getId: (Event object) => object.objId,
        setId: (Event object, int id) {
          object.objId = id;
        },
        objectToFB: (Event object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = fbb.writeString(object.description);
          final statusOffset = fbb.writeString(object.status);
          final lifecycleStatusOffset = fbb.writeString(object.lifecycleStatus);
          final currencyOffset = fbb.writeString(object.currency);
          final timezoneOffset = fbb.writeString(object.timezone);
          final slugOffset = fbb.writeString(object.slug);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.startDate.microsecondsSinceEpoch * 1000);
          fbb.addInt64(4, object.endDate.microsecondsSinceEpoch * 1000);
          fbb.addOffset(5, statusOffset);
          fbb.addOffset(6, lifecycleStatusOffset);
          fbb.addOffset(7, currencyOffset);
          fbb.addOffset(8, timezoneOffset);
          fbb.addOffset(9, slugOffset);
          fbb.addInt64(10, object.settings.targetId);
          fbb.addInt64(11, object.organizer.targetId);
          fbb.addInt64(12, object.objId ?? 0);
          fbb.finish(fbb.endTable());
          return object.objId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final startDateParam = DateTime.fromMicrosecondsSinceEpoch(
              (const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0) /
                      1000)
                  .round());
          final endDateParam = DateTime.fromMicrosecondsSinceEpoch(
              (const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0) /
                      1000)
                  .round());
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final lifecycleStatusParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final currencyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final timezoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final slugParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final imagesParam = obx.ToMany<EventImage>();
          final settingsParam = obx.ToOne<Settings>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0));
          final organizerParam = obx.ToOne<Organizer>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0));
          final ticketsParam = obx.ToMany<Ticket>();
          final object = Event(
              objId: objIdParam,
              id: idParam,
              title: titleParam,
              description: descriptionParam,
              startDate: startDateParam,
              endDate: endDateParam,
              status: statusParam,
              lifecycleStatus: lifecycleStatusParam,
              currency: currencyParam,
              timezone: timezoneParam,
              slug: slugParam,
              images: imagesParam,
              settings: settingsParam,
              organizer: organizerParam,
              tickets: ticketsParam);
          object.settings.attach(store);
          object.organizer.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Event>(object.images, store,
              obx_int.RelInfo<Event>.toMany(1, object.objId!));
          obx_int.InternalToManyAccess.setRelInfo<Event>(object.tickets, store,
              obx_int.RelInfo<Event>.toMany(5, object.objId!));
          return object;
        }),
    EventImage: obx_int.EntityDefinition<EventImage>(
        model: _entities[3],
        toOneRelations: (EventImage object) => [],
        toManyRelations: (EventImage object) => {},
        getId: (EventImage object) => object.objId,
        setId: (EventImage object, int id) {
          object.objId = id;
        },
        objectToFB: (EventImage object, fb.Builder fbb) {
          final urlOffset = fbb.writeString(object.url);
          final fileNameOffset = fbb.writeString(object.fileName);
          final mimeTypeOffset = fbb.writeString(object.mimeType);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, urlOffset);
          fbb.addInt64(2, object.size);
          fbb.addOffset(3, fileNameOffset);
          fbb.addOffset(4, mimeTypeOffset);
          fbb.addOffset(5, typeOffset);
          fbb.addInt64(6, object.objId ?? 0);
          fbb.finish(fbb.endTable());
          return object.objId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final sizeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final fileNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final mimeTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final object = EventImage(
              objId: objIdParam,
              id: idParam,
              url: urlParam,
              size: sizeParam,
              fileName: fileNameParam,
              mimeType: mimeTypeParam,
              type: typeParam);

          return object;
        }),
    EventResponse: obx_int.EntityDefinition<EventResponse>(
        model: _entities[4],
        toOneRelations: (EventResponse object) => [object.links, object.meta],
        toManyRelations: (EventResponse object) => {
              obx_int.RelInfo<EventResponse>.toMany(2, object.objId!):
                  object.data
            },
        getId: (EventResponse object) => object.objId,
        setId: (EventResponse object, int id) {
          object.objId = id;
        },
        objectToFB: (EventResponse object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.links.targetId);
          fbb.addInt64(2, object.meta.targetId);
          fbb.addInt64(3, object.objId ?? 0);
          fbb.finish(fbb.endTable());
          return object.objId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final dataParam = obx.ToMany<Event>();
          final linksParam = obx.ToOne<Links>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final metaParam = obx.ToOne<Meta>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final object = EventResponse(
              objId: objIdParam,
              id: idParam,
              data: dataParam,
              links: linksParam,
              meta: metaParam);
          object.links.attach(store);
          object.meta.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<EventResponse>(object.data,
              store, obx_int.RelInfo<EventResponse>.toMany(2, object.objId!));
          return object;
        }),
    Link: obx_int.EntityDefinition<Link>(
        model: _entities[5],
        toOneRelations: (Link object) => [],
        toManyRelations: (Link object) => {},
        getId: (Link object) => object.objId,
        setId: (Link object, int id) {
          object.objId = id;
        },
        objectToFB: (Link object, fb.Builder fbb) {
          final urlOffset =
              object.url == null ? null : fbb.writeString(object.url!);
          final labelOffset = fbb.writeString(object.label);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, urlOffset);
          fbb.addOffset(2, labelOffset);
          fbb.addBool(3, object.active);
          fbb.addInt64(4, object.objId ?? 0);
          fbb.finish(fbb.endTable());
          return object.objId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final objIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final labelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final activeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final object = Link(
              id: idParam,
              url: urlParam,
              objId: objIdParam,
              label: labelParam,
              active: activeParam);

          return object;
        }),
    Links: obx_int.EntityDefinition<Links>(
        model: _entities[6],
        toOneRelations: (Links object) => [],
        toManyRelations: (Links object) => {},
        getId: (Links object) => object.objId,
        setId: (Links object, int id) {
          object.objId = id;
        },
        objectToFB: (Links object, fb.Builder fbb) {
          final firstOffset = fbb.writeString(object.first);
          final lastOffset = fbb.writeString(object.last);
          final prevOffset =
              object.prev == null ? null : fbb.writeString(object.prev!);
          final nextOffset = fbb.writeString(object.next);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, firstOffset);
          fbb.addOffset(2, lastOffset);
          fbb.addOffset(3, prevOffset);
          fbb.addOffset(4, nextOffset);
          fbb.addInt64(5, object.objId ?? 0);
          fbb.finish(fbb.endTable());
          return object.objId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final firstParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final lastParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final prevParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final nextParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = Links(
              objId: objIdParam,
              id: idParam,
              first: firstParam,
              last: lastParam,
              prev: prevParam,
              next: nextParam);

          return object;
        }),
    LocationDetails: obx_int.EntityDefinition<LocationDetails>(
        model: _entities[7],
        toOneRelations: (LocationDetails object) => [],
        toManyRelations: (LocationDetails object) => {},
        getId: (LocationDetails object) => object.objId,
        setId: (LocationDetails object, int id) {
          object.objId = id;
        },
        objectToFB: (LocationDetails object, fb.Builder fbb) {
          final cityOffset = fbb.writeString(object.city);
          final countryOffset = fbb.writeString(object.country);
          final venueNameOffset = fbb.writeString(object.venueName);
          final addressLine1Offset = fbb.writeString(object.addressLine1);
          final addressLine2Offset = object.addressLine2 == null
              ? null
              : fbb.writeString(object.addressLine2!);
          final stateOrRegionOffset = object.stateOrRegion == null
              ? null
              : fbb.writeString(object.stateOrRegion!);
          final zipOrPostalCodeOffset = fbb.writeString(object.zipOrPostalCode);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, cityOffset);
          fbb.addOffset(2, countryOffset);
          fbb.addOffset(3, venueNameOffset);
          fbb.addOffset(4, addressLine1Offset);
          fbb.addOffset(5, addressLine2Offset);
          fbb.addOffset(6, stateOrRegionOffset);
          fbb.addOffset(7, zipOrPostalCodeOffset);
          fbb.addInt64(8, object.objId ?? 0);
          fbb.finish(fbb.endTable());
          return object.objId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final cityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final countryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final venueNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final addressLine1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final addressLine2Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final stateOrRegionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final zipOrPostalCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final object = LocationDetails(
              objId: objIdParam,
              id: idParam,
              city: cityParam,
              country: countryParam,
              venueName: venueNameParam,
              addressLine1: addressLine1Param,
              addressLine2: addressLine2Param,
              stateOrRegion: stateOrRegionParam,
              zipOrPostalCode: zipOrPostalCodeParam);

          return object;
        }),
    Meta: obx_int.EntityDefinition<Meta>(
        model: _entities[8],
        toOneRelations: (Meta object) => [object.allowedSorts],
        toManyRelations: (Meta object) =>
            {obx_int.RelInfo<Meta>.toMany(3, object.objId!): object.links},
        getId: (Meta object) => object.objId,
        setId: (Meta object, int id) {
          object.objId = id;
        },
        objectToFB: (Meta object, fb.Builder fbb) {
          final pathOffset = fbb.writeString(object.path);
          final defaultSortOffset = fbb.writeString(object.defaultSort);
          final defaultSortDirectionOffset =
              fbb.writeString(object.defaultSortDirection);
          final allowedFilterFieldsOffset = fbb.writeList(object
              .allowedFilterFields
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.currentPage);
          fbb.addInt64(2, object.from);
          fbb.addInt64(3, object.lastPage);
          fbb.addOffset(4, pathOffset);
          fbb.addInt64(5, object.perPage);
          fbb.addInt64(6, object.to);
          fbb.addInt64(7, object.total);
          fbb.addInt64(8, object.allowedSorts.targetId);
          fbb.addOffset(9, defaultSortOffset);
          fbb.addOffset(10, defaultSortDirectionOffset);
          fbb.addOffset(11, allowedFilterFieldsOffset);
          fbb.addInt64(12, object.objId ?? 0);
          fbb.finish(fbb.endTable());
          return object.objId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final currentPageParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final fromParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final lastPageParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final linksParam = obx.ToMany<Link>();
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final perPageParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final toParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final totalParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final allowedFilterFieldsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 26, []);
          final allowedSortsParam = obx.ToOne<AllowedSorts>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));
          final defaultSortParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final defaultSortDirectionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final object = Meta(
              objId: objIdParam,
              id: idParam,
              currentPage: currentPageParam,
              from: fromParam,
              lastPage: lastPageParam,
              links: linksParam,
              path: pathParam,
              perPage: perPageParam,
              to: toParam,
              total: totalParam,
              allowedFilterFields: allowedFilterFieldsParam,
              allowedSorts: allowedSortsParam,
              defaultSort: defaultSortParam,
              defaultSortDirection: defaultSortDirectionParam);
          object.allowedSorts.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Meta>(object.links, store,
              obx_int.RelInfo<Meta>.toMany(3, object.objId!));
          return object;
        }),
    Organizer: obx_int.EntityDefinition<Organizer>(
        model: _entities[9],
        toOneRelations: (Organizer object) => [],
        toManyRelations: (Organizer object) => {},
        getId: (Organizer object) => object.objId,
        setId: (Organizer object, int id) {
          object.objId = id;
        },
        objectToFB: (Organizer object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final websiteOffset =
              object.website == null ? null : fbb.writeString(object.website!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final timezoneOffset = fbb.writeString(object.timezone);
          final currencyOffset = fbb.writeString(object.currency);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.addOffset(4, websiteOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addOffset(6, timezoneOffset);
          fbb.addOffset(7, currencyOffset);
          fbb.addInt64(8, object.objId ?? 0);
          fbb.finish(fbb.endTable());
          return object.objId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final websiteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final timezoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final currencyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final object = Organizer(
              objId: objIdParam,
              id: idParam,
              name: nameParam,
              email: emailParam,
              phone: phoneParam,
              website: websiteParam,
              description: descriptionParam,
              timezone: timezoneParam,
              currency: currencyParam);

          return object;
        }),
    Settings: obx_int.EntityDefinition<Settings>(
        model: _entities[10],
        toOneRelations: (Settings object) => [object.locationDetails],
        toManyRelations: (Settings object) => {},
        getId: (Settings object) => object.objId,
        setId: (Settings object, int id) {
          object.objId = id;
        },
        objectToFB: (Settings object, fb.Builder fbb) {
          final preCheckoutMessageOffset = object.preCheckoutMessage == null
              ? null
              : fbb.writeString(object.preCheckoutMessage!);
          final postCheckoutMessageOffset = object.postCheckoutMessage == null
              ? null
              : fbb.writeString(object.postCheckoutMessage!);
          final ticketPageMessageOffset = object.ticketPageMessage == null
              ? null
              : fbb.writeString(object.ticketPageMessage!);
          final continueButtonTextOffset = object.continueButtonText == null
              ? null
              : fbb.writeString(object.continueButtonText!);
          final emailFooterMessageOffset = object.emailFooterMessage == null
              ? null
              : fbb.writeString(object.emailFooterMessage!);
          final supportEmailOffset = object.supportEmail == null
              ? null
              : fbb.writeString(object.supportEmail!);
          final homepageBodyBackgroundColorOffset =
              fbb.writeString(object.homepageBodyBackgroundColor);
          final homepageBackgroundColorOffset =
              fbb.writeString(object.homepageBackgroundColor);
          final homepagePrimaryColorOffset =
              fbb.writeString(object.homepagePrimaryColor);
          final homepagePrimaryTextColorOffset =
              fbb.writeString(object.homepagePrimaryTextColor);
          final homepageSecondaryColorOffset =
              fbb.writeString(object.homepageSecondaryColor);
          final homepageSecondaryTextColorOffset =
              fbb.writeString(object.homepageSecondaryTextColor);
          final homepageBackgroundTypeOffset =
              fbb.writeString(object.homepageBackgroundType);
          final websiteUrlOffset = object.websiteUrl == null
              ? null
              : fbb.writeString(object.websiteUrl!);
          final mapsUrlOffset =
              object.mapsUrl == null ? null : fbb.writeString(object.mapsUrl!);
          final onlineEventConnectionDetailsOffset =
              object.onlineEventConnectionDetails == null
                  ? null
                  : fbb.writeString(object.onlineEventConnectionDetails!);
          final seoTitleOffset = object.seoTitle == null
              ? null
              : fbb.writeString(object.seoTitle!);
          final seoDescriptionOffset = object.seoDescription == null
              ? null
              : fbb.writeString(object.seoDescription!);
          final seoKeywordsOffset = object.seoKeywords == null
              ? null
              : fbb.writeString(object.seoKeywords!);
          final priceDisplayModeOffset = object.priceDisplayMode == null
              ? null
              : fbb.writeString(object.priceDisplayMode!);
          fbb.startTable(30);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, preCheckoutMessageOffset);
          fbb.addOffset(2, postCheckoutMessageOffset);
          fbb.addOffset(3, ticketPageMessageOffset);
          fbb.addOffset(4, continueButtonTextOffset);
          fbb.addBool(5, object.requiredAttendeeDetails);
          fbb.addOffset(6, emailFooterMessageOffset);
          fbb.addOffset(7, supportEmailOffset);
          fbb.addInt64(8, object.orderTimeoutInMinutes);
          fbb.addOffset(9, homepageBodyBackgroundColorOffset);
          fbb.addOffset(10, homepageBackgroundColorOffset);
          fbb.addOffset(11, homepagePrimaryColorOffset);
          fbb.addOffset(12, homepagePrimaryTextColorOffset);
          fbb.addOffset(13, homepageSecondaryColorOffset);
          fbb.addOffset(14, homepageSecondaryTextColorOffset);
          fbb.addOffset(15, homepageBackgroundTypeOffset);
          fbb.addOffset(16, websiteUrlOffset);
          fbb.addOffset(17, mapsUrlOffset);
          fbb.addInt64(18, object.locationDetails.targetId);
          fbb.addBool(19, object.isOnlineEvent);
          fbb.addOffset(20, onlineEventConnectionDetailsOffset);
          fbb.addOffset(21, seoTitleOffset);
          fbb.addOffset(22, seoDescriptionOffset);
          fbb.addOffset(23, seoKeywordsOffset);
          fbb.addBool(24, object.allowSearchEngineIndexing);
          fbb.addBool(25, object.notifyOrganizerOfNewOrders);
          fbb.addOffset(26, priceDisplayModeOffset);
          fbb.addBool(27, object.hideGettingStartedPage);
          fbb.addInt64(28, object.objId ?? 0);
          fbb.finish(fbb.endTable());
          return object.objId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final objIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 60);
          final preCheckoutMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6);
          final postCheckoutMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final ticketPageMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final continueButtonTextParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final requiredAttendeeDetailsParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final emailFooterMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final supportEmailParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final orderTimeoutInMinutesParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final homepageBodyBackgroundColorParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final homepageBackgroundColorParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final homepagePrimaryColorParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, '');
          final homepagePrimaryTextColorParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, '');
          final homepageSecondaryColorParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 30, '');
          final homepageSecondaryTextColorParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, '');
          final homepageBackgroundTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, '');
          final websiteUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 36);
          final mapsUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final locationDetailsParam = obx.ToOne<LocationDetails>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0));
          final isOnlineEventParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 42, false);
          final onlineEventConnectionDetailsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 44);
          final seoTitleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 46);
          final seoDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 48);
          final seoKeywordsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 50);
          final allowSearchEngineIndexingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 52, false);
          final notifyOrganizerOfNewOrdersParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 54, false);
          final priceDisplayModeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 56);
          final hideGettingStartedPageParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 58, false);
          final object = Settings(
              id: idParam,
              objId: objIdParam,
              preCheckoutMessage: preCheckoutMessageParam,
              postCheckoutMessage: postCheckoutMessageParam,
              ticketPageMessage: ticketPageMessageParam,
              continueButtonText: continueButtonTextParam,
              requiredAttendeeDetails: requiredAttendeeDetailsParam,
              emailFooterMessage: emailFooterMessageParam,
              supportEmail: supportEmailParam,
              orderTimeoutInMinutes: orderTimeoutInMinutesParam,
              homepageBodyBackgroundColor: homepageBodyBackgroundColorParam,
              homepageBackgroundColor: homepageBackgroundColorParam,
              homepagePrimaryColor: homepagePrimaryColorParam,
              homepagePrimaryTextColor: homepagePrimaryTextColorParam,
              homepageSecondaryColor: homepageSecondaryColorParam,
              homepageSecondaryTextColor: homepageSecondaryTextColorParam,
              homepageBackgroundType: homepageBackgroundTypeParam,
              websiteUrl: websiteUrlParam,
              mapsUrl: mapsUrlParam,
              locationDetails: locationDetailsParam,
              isOnlineEvent: isOnlineEventParam,
              onlineEventConnectionDetails: onlineEventConnectionDetailsParam,
              seoTitle: seoTitleParam,
              seoDescription: seoDescriptionParam,
              seoKeywords: seoKeywordsParam,
              allowSearchEngineIndexing: allowSearchEngineIndexingParam,
              notifyOrganizerOfNewOrders: notifyOrganizerOfNewOrdersParam,
              priceDisplayMode: priceDisplayModeParam,
              hideGettingStartedPage: hideGettingStartedPageParam);
          object.locationDetails.attach(store);
          return object;
        }),
    Ticket: obx_int.EntityDefinition<Ticket>(
        model: _entities[11],
        toOneRelations: (Ticket object) => [],
        toManyRelations: (Ticket object) =>
            {obx_int.RelInfo<Ticket>.toMany(4, object.objId!): object.prices},
        getId: (Ticket object) => object.objId,
        setId: (Ticket object, int id) {
          object.objId = id;
        },
        objectToFB: (Ticket object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(17);
          fbb.addInt64(0, object.objId ?? 0);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addInt64(5, object.maxPerOrder);
          fbb.addInt64(6, object.minPerOrder);
          fbb.addInt64(
              7,
              object.saleStartDate == null
                  ? null
                  : object.saleStartDate!.microsecondsSinceEpoch * 1000);
          fbb.addInt64(
              8,
              object.saleEndDate == null
                  ? null
                  : object.saleEndDate!.microsecondsSinceEpoch * 1000);
          fbb.addInt64(9, object.eventId);
          fbb.addBool(10, object.isBeforeSaleStartDate);
          fbb.addBool(11, object.isAfterSaleEndDate);
          fbb.addInt64(12, object.quantityAvailable);
          fbb.addFloat64(13, object.price);
          fbb.addBool(14, object.isAvailable);
          fbb.addBool(15, object.isSoldOut);
          fbb.finish(fbb.endTable());
          return object.objId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final saleStartDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final saleEndDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final objIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final maxPerOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final minPerOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final saleStartDateParam = saleStartDateValue == null
              ? null
              : DateTime.fromMicrosecondsSinceEpoch(
                  (saleStartDateValue / 1000).round());
          final saleEndDateParam = saleEndDateValue == null
              ? null
              : DateTime.fromMicrosecondsSinceEpoch(
                  (saleEndDateValue / 1000).round());
          final eventIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final isBeforeSaleStartDateParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24);
          final isAfterSaleEndDateParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final quantityAvailableParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final priceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 30);
          final pricesParam = obx.ToMany<TicketPrice>();
          final isAvailableParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 32, false);
          final isSoldOutParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 34, false);
          final object = Ticket(
              objId: objIdParam,
              id: idParam,
              title: titleParam,
              type: typeParam,
              description: descriptionParam,
              maxPerOrder: maxPerOrderParam,
              minPerOrder: minPerOrderParam,
              saleStartDate: saleStartDateParam,
              saleEndDate: saleEndDateParam,
              eventId: eventIdParam,
              isBeforeSaleStartDate: isBeforeSaleStartDateParam,
              isAfterSaleEndDate: isAfterSaleEndDateParam,
              quantityAvailable: quantityAvailableParam,
              price: priceParam,
              prices: pricesParam,
              isAvailable: isAvailableParam,
              isSoldOut: isSoldOutParam);
          obx_int.InternalToManyAccess.setRelInfo<Ticket>(object.prices, store,
              obx_int.RelInfo<Ticket>.toMany(4, object.objId!));
          return object;
        }),
    TicketPrice: obx_int.EntityDefinition<TicketPrice>(
        model: _entities[12],
        toOneRelations: (TicketPrice object) => [],
        toManyRelations: (TicketPrice object) => {},
        getId: (TicketPrice object) => object.objId,
        setId: (TicketPrice object, int id) {
          object.objId = id;
        },
        objectToFB: (TicketPrice object, fb.Builder fbb) {
          final labelOffset =
              object.label == null ? null : fbb.writeString(object.label!);
          fbb.startTable(17);
          fbb.addInt64(0, object.objId ?? 0);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, labelOffset);
          fbb.addFloat64(3, object.price);
          fbb.addInt64(
              4,
              object.saleStartDate == null
                  ? null
                  : object.saleStartDate!.microsecondsSinceEpoch * 1000);
          fbb.addInt64(
              5,
              object.saleEndDate == null
                  ? null
                  : object.saleEndDate!.microsecondsSinceEpoch * 1000);
          fbb.addFloat64(6, object.priceIncludingTaxesAndFees);
          fbb.addFloat64(7, object.priceBeforeDiscount);
          fbb.addBool(8, object.isDiscounted);
          fbb.addFloat64(9, object.taxTotal);
          fbb.addFloat64(10, object.feeTotal);
          fbb.addBool(11, object.isBeforeSaleStartDate);
          fbb.addBool(12, object.isAfterSaleEndDate);
          fbb.addBool(13, object.isAvailable);
          fbb.addBool(14, object.isSoldOut);
          fbb.addInt64(15, object.quantityRemaining);
          fbb.finish(fbb.endTable());
          return object.objId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final saleStartDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final saleEndDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final objIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final labelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final saleStartDateParam = saleStartDateValue == null
              ? null
              : DateTime.fromMicrosecondsSinceEpoch(
                  (saleStartDateValue / 1000).round());
          final saleEndDateParam = saleEndDateValue == null
              ? null
              : DateTime.fromMicrosecondsSinceEpoch(
                  (saleEndDateValue / 1000).round());
          final priceIncludingTaxesAndFeesParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final priceBeforeDiscountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 18);
          final isDiscountedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final taxTotalParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final feeTotalParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final isBeforeSaleStartDateParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final isAfterSaleEndDateParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false);
          final isAvailableParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 30, false);
          final isSoldOutParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 32, false);
          final quantityRemainingParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          final object = TicketPrice(
              objId: objIdParam,
              id: idParam,
              label: labelParam,
              price: priceParam,
              saleStartDate: saleStartDateParam,
              saleEndDate: saleEndDateParam,
              priceIncludingTaxesAndFees: priceIncludingTaxesAndFeesParam,
              priceBeforeDiscount: priceBeforeDiscountParam,
              isDiscounted: isDiscountedParam,
              taxTotal: taxTotalParam,
              feeTotal: feeTotalParam,
              isBeforeSaleStartDate: isBeforeSaleStartDateParam,
              isAfterSaleEndDate: isAfterSaleEndDateParam,
              isAvailable: isAvailableParam,
              isSoldOut: isSoldOutParam,
              quantityRemaining: quantityRemainingParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AllowedSorts] entity fields to define ObjectBox queries.
class AllowedSorts_ {
  /// See [AllowedSorts.id].
  static final id =
      obx.QueryIntegerProperty<AllowedSorts>(_entities[0].properties[0]);

  /// See [AllowedSorts.startDate].
  static final startDate = obx.QueryRelationToOne<AllowedSorts, CreatedAt>(
      _entities[0].properties[1]);

  /// See [AllowedSorts.endDate].
  static final endDate = obx.QueryRelationToOne<AllowedSorts, CreatedAt>(
      _entities[0].properties[2]);

  /// See [AllowedSorts.createdAt].
  static final createdAt = obx.QueryRelationToOne<AllowedSorts, CreatedAt>(
      _entities[0].properties[3]);

  /// See [AllowedSorts.updatedAt].
  static final updatedAt = obx.QueryRelationToOne<AllowedSorts, CreatedAt>(
      _entities[0].properties[4]);

  /// See [AllowedSorts.objId].
  static final objId =
      obx.QueryIntegerProperty<AllowedSorts>(_entities[0].properties[5]);
}

/// [CreatedAt] entity fields to define ObjectBox queries.
class CreatedAt_ {
  /// See [CreatedAt.id].
  static final id =
      obx.QueryIntegerProperty<CreatedAt>(_entities[1].properties[0]);

  /// See [CreatedAt.asc].
  static final asc =
      obx.QueryStringProperty<CreatedAt>(_entities[1].properties[1]);

  /// See [CreatedAt.desc].
  static final desc =
      obx.QueryStringProperty<CreatedAt>(_entities[1].properties[2]);

  /// See [CreatedAt.objId].
  static final objId =
      obx.QueryIntegerProperty<CreatedAt>(_entities[1].properties[3]);
}

/// [Event] entity fields to define ObjectBox queries.
class Event_ {
  /// See [Event.id].
  static final id = obx.QueryIntegerProperty<Event>(_entities[2].properties[0]);

  /// See [Event.title].
  static final title =
      obx.QueryStringProperty<Event>(_entities[2].properties[1]);

  /// See [Event.description].
  static final description =
      obx.QueryStringProperty<Event>(_entities[2].properties[2]);

  /// See [Event.startDate].
  static final startDate =
      obx.QueryDateNanoProperty<Event>(_entities[2].properties[3]);

  /// See [Event.endDate].
  static final endDate =
      obx.QueryDateNanoProperty<Event>(_entities[2].properties[4]);

  /// See [Event.status].
  static final status =
      obx.QueryStringProperty<Event>(_entities[2].properties[5]);

  /// See [Event.lifecycleStatus].
  static final lifecycleStatus =
      obx.QueryStringProperty<Event>(_entities[2].properties[6]);

  /// See [Event.currency].
  static final currency =
      obx.QueryStringProperty<Event>(_entities[2].properties[7]);

  /// See [Event.timezone].
  static final timezone =
      obx.QueryStringProperty<Event>(_entities[2].properties[8]);

  /// See [Event.slug].
  static final slug =
      obx.QueryStringProperty<Event>(_entities[2].properties[9]);

  /// See [Event.settings].
  static final settings =
      obx.QueryRelationToOne<Event, Settings>(_entities[2].properties[10]);

  /// See [Event.organizer].
  static final organizer =
      obx.QueryRelationToOne<Event, Organizer>(_entities[2].properties[11]);

  /// See [Event.objId].
  static final objId =
      obx.QueryIntegerProperty<Event>(_entities[2].properties[12]);

  /// see [Event.images]
  static final images =
      obx.QueryRelationToMany<Event, EventImage>(_entities[2].relations[0]);

  /// see [Event.tickets]
  static final tickets =
      obx.QueryRelationToMany<Event, Ticket>(_entities[2].relations[1]);
}

/// [EventImage] entity fields to define ObjectBox queries.
class EventImage_ {
  /// See [EventImage.id].
  static final id =
      obx.QueryIntegerProperty<EventImage>(_entities[3].properties[0]);

  /// See [EventImage.url].
  static final url =
      obx.QueryStringProperty<EventImage>(_entities[3].properties[1]);

  /// See [EventImage.size].
  static final size =
      obx.QueryIntegerProperty<EventImage>(_entities[3].properties[2]);

  /// See [EventImage.fileName].
  static final fileName =
      obx.QueryStringProperty<EventImage>(_entities[3].properties[3]);

  /// See [EventImage.mimeType].
  static final mimeType =
      obx.QueryStringProperty<EventImage>(_entities[3].properties[4]);

  /// See [EventImage.type].
  static final type =
      obx.QueryStringProperty<EventImage>(_entities[3].properties[5]);

  /// See [EventImage.objId].
  static final objId =
      obx.QueryIntegerProperty<EventImage>(_entities[3].properties[6]);
}

/// [EventResponse] entity fields to define ObjectBox queries.
class EventResponse_ {
  /// See [EventResponse.id].
  static final id =
      obx.QueryIntegerProperty<EventResponse>(_entities[4].properties[0]);

  /// See [EventResponse.links].
  static final links =
      obx.QueryRelationToOne<EventResponse, Links>(_entities[4].properties[1]);

  /// See [EventResponse.meta].
  static final meta =
      obx.QueryRelationToOne<EventResponse, Meta>(_entities[4].properties[2]);

  /// See [EventResponse.objId].
  static final objId =
      obx.QueryIntegerProperty<EventResponse>(_entities[4].properties[3]);

  /// see [EventResponse.data]
  static final data =
      obx.QueryRelationToMany<EventResponse, Event>(_entities[4].relations[0]);
}

/// [Link] entity fields to define ObjectBox queries.
class Link_ {
  /// See [Link.id].
  static final id = obx.QueryIntegerProperty<Link>(_entities[5].properties[0]);

  /// See [Link.url].
  static final url = obx.QueryStringProperty<Link>(_entities[5].properties[1]);

  /// See [Link.label].
  static final label =
      obx.QueryStringProperty<Link>(_entities[5].properties[2]);

  /// See [Link.active].
  static final active =
      obx.QueryBooleanProperty<Link>(_entities[5].properties[3]);

  /// See [Link.objId].
  static final objId =
      obx.QueryIntegerProperty<Link>(_entities[5].properties[4]);
}

/// [Links] entity fields to define ObjectBox queries.
class Links_ {
  /// See [Links.id].
  static final id = obx.QueryIntegerProperty<Links>(_entities[6].properties[0]);

  /// See [Links.first].
  static final first =
      obx.QueryStringProperty<Links>(_entities[6].properties[1]);

  /// See [Links.last].
  static final last =
      obx.QueryStringProperty<Links>(_entities[6].properties[2]);

  /// See [Links.prev].
  static final prev =
      obx.QueryStringProperty<Links>(_entities[6].properties[3]);

  /// See [Links.next].
  static final next =
      obx.QueryStringProperty<Links>(_entities[6].properties[4]);

  /// See [Links.objId].
  static final objId =
      obx.QueryIntegerProperty<Links>(_entities[6].properties[5]);
}

/// [LocationDetails] entity fields to define ObjectBox queries.
class LocationDetails_ {
  /// See [LocationDetails.id].
  static final id =
      obx.QueryIntegerProperty<LocationDetails>(_entities[7].properties[0]);

  /// See [LocationDetails.city].
  static final city =
      obx.QueryStringProperty<LocationDetails>(_entities[7].properties[1]);

  /// See [LocationDetails.country].
  static final country =
      obx.QueryStringProperty<LocationDetails>(_entities[7].properties[2]);

  /// See [LocationDetails.venueName].
  static final venueName =
      obx.QueryStringProperty<LocationDetails>(_entities[7].properties[3]);

  /// See [LocationDetails.addressLine1].
  static final addressLine1 =
      obx.QueryStringProperty<LocationDetails>(_entities[7].properties[4]);

  /// See [LocationDetails.addressLine2].
  static final addressLine2 =
      obx.QueryStringProperty<LocationDetails>(_entities[7].properties[5]);

  /// See [LocationDetails.stateOrRegion].
  static final stateOrRegion =
      obx.QueryStringProperty<LocationDetails>(_entities[7].properties[6]);

  /// See [LocationDetails.zipOrPostalCode].
  static final zipOrPostalCode =
      obx.QueryStringProperty<LocationDetails>(_entities[7].properties[7]);

  /// See [LocationDetails.objId].
  static final objId =
      obx.QueryIntegerProperty<LocationDetails>(_entities[7].properties[8]);
}

/// [Meta] entity fields to define ObjectBox queries.
class Meta_ {
  /// See [Meta.id].
  static final id = obx.QueryIntegerProperty<Meta>(_entities[8].properties[0]);

  /// See [Meta.currentPage].
  static final currentPage =
      obx.QueryIntegerProperty<Meta>(_entities[8].properties[1]);

  /// See [Meta.from].
  static final from =
      obx.QueryIntegerProperty<Meta>(_entities[8].properties[2]);

  /// See [Meta.lastPage].
  static final lastPage =
      obx.QueryIntegerProperty<Meta>(_entities[8].properties[3]);

  /// See [Meta.path].
  static final path = obx.QueryStringProperty<Meta>(_entities[8].properties[4]);

  /// See [Meta.perPage].
  static final perPage =
      obx.QueryIntegerProperty<Meta>(_entities[8].properties[5]);

  /// See [Meta.to].
  static final to = obx.QueryIntegerProperty<Meta>(_entities[8].properties[6]);

  /// See [Meta.total].
  static final total =
      obx.QueryIntegerProperty<Meta>(_entities[8].properties[7]);

  /// See [Meta.allowedSorts].
  static final allowedSorts =
      obx.QueryRelationToOne<Meta, AllowedSorts>(_entities[8].properties[8]);

  /// See [Meta.defaultSort].
  static final defaultSort =
      obx.QueryStringProperty<Meta>(_entities[8].properties[9]);

  /// See [Meta.defaultSortDirection].
  static final defaultSortDirection =
      obx.QueryStringProperty<Meta>(_entities[8].properties[10]);

  /// See [Meta.allowedFilterFields].
  static final allowedFilterFields =
      obx.QueryStringVectorProperty<Meta>(_entities[8].properties[11]);

  /// See [Meta.objId].
  static final objId =
      obx.QueryIntegerProperty<Meta>(_entities[8].properties[12]);

  /// see [Meta.links]
  static final links =
      obx.QueryRelationToMany<Meta, Link>(_entities[8].relations[0]);
}

/// [Organizer] entity fields to define ObjectBox queries.
class Organizer_ {
  /// See [Organizer.id].
  static final id =
      obx.QueryIntegerProperty<Organizer>(_entities[9].properties[0]);

  /// See [Organizer.name].
  static final name =
      obx.QueryStringProperty<Organizer>(_entities[9].properties[1]);

  /// See [Organizer.email].
  static final email =
      obx.QueryStringProperty<Organizer>(_entities[9].properties[2]);

  /// See [Organizer.phone].
  static final phone =
      obx.QueryStringProperty<Organizer>(_entities[9].properties[3]);

  /// See [Organizer.website].
  static final website =
      obx.QueryStringProperty<Organizer>(_entities[9].properties[4]);

  /// See [Organizer.description].
  static final description =
      obx.QueryStringProperty<Organizer>(_entities[9].properties[5]);

  /// See [Organizer.timezone].
  static final timezone =
      obx.QueryStringProperty<Organizer>(_entities[9].properties[6]);

  /// See [Organizer.currency].
  static final currency =
      obx.QueryStringProperty<Organizer>(_entities[9].properties[7]);

  /// See [Organizer.objId].
  static final objId =
      obx.QueryIntegerProperty<Organizer>(_entities[9].properties[8]);
}

/// [Settings] entity fields to define ObjectBox queries.
class Settings_ {
  /// See [Settings.id].
  static final id =
      obx.QueryIntegerProperty<Settings>(_entities[10].properties[0]);

  /// See [Settings.preCheckoutMessage].
  static final preCheckoutMessage =
      obx.QueryStringProperty<Settings>(_entities[10].properties[1]);

  /// See [Settings.postCheckoutMessage].
  static final postCheckoutMessage =
      obx.QueryStringProperty<Settings>(_entities[10].properties[2]);

  /// See [Settings.ticketPageMessage].
  static final ticketPageMessage =
      obx.QueryStringProperty<Settings>(_entities[10].properties[3]);

  /// See [Settings.continueButtonText].
  static final continueButtonText =
      obx.QueryStringProperty<Settings>(_entities[10].properties[4]);

  /// See [Settings.requiredAttendeeDetails].
  static final requiredAttendeeDetails =
      obx.QueryBooleanProperty<Settings>(_entities[10].properties[5]);

  /// See [Settings.emailFooterMessage].
  static final emailFooterMessage =
      obx.QueryStringProperty<Settings>(_entities[10].properties[6]);

  /// See [Settings.supportEmail].
  static final supportEmail =
      obx.QueryStringProperty<Settings>(_entities[10].properties[7]);

  /// See [Settings.orderTimeoutInMinutes].
  static final orderTimeoutInMinutes =
      obx.QueryIntegerProperty<Settings>(_entities[10].properties[8]);

  /// See [Settings.homepageBodyBackgroundColor].
  static final homepageBodyBackgroundColor =
      obx.QueryStringProperty<Settings>(_entities[10].properties[9]);

  /// See [Settings.homepageBackgroundColor].
  static final homepageBackgroundColor =
      obx.QueryStringProperty<Settings>(_entities[10].properties[10]);

  /// See [Settings.homepagePrimaryColor].
  static final homepagePrimaryColor =
      obx.QueryStringProperty<Settings>(_entities[10].properties[11]);

  /// See [Settings.homepagePrimaryTextColor].
  static final homepagePrimaryTextColor =
      obx.QueryStringProperty<Settings>(_entities[10].properties[12]);

  /// See [Settings.homepageSecondaryColor].
  static final homepageSecondaryColor =
      obx.QueryStringProperty<Settings>(_entities[10].properties[13]);

  /// See [Settings.homepageSecondaryTextColor].
  static final homepageSecondaryTextColor =
      obx.QueryStringProperty<Settings>(_entities[10].properties[14]);

  /// See [Settings.homepageBackgroundType].
  static final homepageBackgroundType =
      obx.QueryStringProperty<Settings>(_entities[10].properties[15]);

  /// See [Settings.websiteUrl].
  static final websiteUrl =
      obx.QueryStringProperty<Settings>(_entities[10].properties[16]);

  /// See [Settings.mapsUrl].
  static final mapsUrl =
      obx.QueryStringProperty<Settings>(_entities[10].properties[17]);

  /// See [Settings.locationDetails].
  static final locationDetails =
      obx.QueryRelationToOne<Settings, LocationDetails>(
          _entities[10].properties[18]);

  /// See [Settings.isOnlineEvent].
  static final isOnlineEvent =
      obx.QueryBooleanProperty<Settings>(_entities[10].properties[19]);

  /// See [Settings.onlineEventConnectionDetails].
  static final onlineEventConnectionDetails =
      obx.QueryStringProperty<Settings>(_entities[10].properties[20]);

  /// See [Settings.seoTitle].
  static final seoTitle =
      obx.QueryStringProperty<Settings>(_entities[10].properties[21]);

  /// See [Settings.seoDescription].
  static final seoDescription =
      obx.QueryStringProperty<Settings>(_entities[10].properties[22]);

  /// See [Settings.seoKeywords].
  static final seoKeywords =
      obx.QueryStringProperty<Settings>(_entities[10].properties[23]);

  /// See [Settings.allowSearchEngineIndexing].
  static final allowSearchEngineIndexing =
      obx.QueryBooleanProperty<Settings>(_entities[10].properties[24]);

  /// See [Settings.notifyOrganizerOfNewOrders].
  static final notifyOrganizerOfNewOrders =
      obx.QueryBooleanProperty<Settings>(_entities[10].properties[25]);

  /// See [Settings.priceDisplayMode].
  static final priceDisplayMode =
      obx.QueryStringProperty<Settings>(_entities[10].properties[26]);

  /// See [Settings.hideGettingStartedPage].
  static final hideGettingStartedPage =
      obx.QueryBooleanProperty<Settings>(_entities[10].properties[27]);

  /// See [Settings.objId].
  static final objId =
      obx.QueryIntegerProperty<Settings>(_entities[10].properties[28]);
}

/// [Ticket] entity fields to define ObjectBox queries.
class Ticket_ {
  /// See [Ticket.objId].
  static final objId =
      obx.QueryIntegerProperty<Ticket>(_entities[11].properties[0]);

  /// See [Ticket.id].
  static final id =
      obx.QueryIntegerProperty<Ticket>(_entities[11].properties[1]);

  /// See [Ticket.title].
  static final title =
      obx.QueryStringProperty<Ticket>(_entities[11].properties[2]);

  /// See [Ticket.type].
  static final type =
      obx.QueryStringProperty<Ticket>(_entities[11].properties[3]);

  /// See [Ticket.description].
  static final description =
      obx.QueryStringProperty<Ticket>(_entities[11].properties[4]);

  /// See [Ticket.maxPerOrder].
  static final maxPerOrder =
      obx.QueryIntegerProperty<Ticket>(_entities[11].properties[5]);

  /// See [Ticket.minPerOrder].
  static final minPerOrder =
      obx.QueryIntegerProperty<Ticket>(_entities[11].properties[6]);

  /// See [Ticket.saleStartDate].
  static final saleStartDate =
      obx.QueryDateNanoProperty<Ticket>(_entities[11].properties[7]);

  /// See [Ticket.saleEndDate].
  static final saleEndDate =
      obx.QueryDateNanoProperty<Ticket>(_entities[11].properties[8]);

  /// See [Ticket.eventId].
  static final eventId =
      obx.QueryIntegerProperty<Ticket>(_entities[11].properties[9]);

  /// See [Ticket.isBeforeSaleStartDate].
  static final isBeforeSaleStartDate =
      obx.QueryBooleanProperty<Ticket>(_entities[11].properties[10]);

  /// See [Ticket.isAfterSaleEndDate].
  static final isAfterSaleEndDate =
      obx.QueryBooleanProperty<Ticket>(_entities[11].properties[11]);

  /// See [Ticket.quantityAvailable].
  static final quantityAvailable =
      obx.QueryIntegerProperty<Ticket>(_entities[11].properties[12]);

  /// See [Ticket.price].
  static final price =
      obx.QueryDoubleProperty<Ticket>(_entities[11].properties[13]);

  /// See [Ticket.isAvailable].
  static final isAvailable =
      obx.QueryBooleanProperty<Ticket>(_entities[11].properties[14]);

  /// See [Ticket.isSoldOut].
  static final isSoldOut =
      obx.QueryBooleanProperty<Ticket>(_entities[11].properties[15]);

  /// see [Ticket.prices]
  static final prices =
      obx.QueryRelationToMany<Ticket, TicketPrice>(_entities[11].relations[0]);
}

/// [TicketPrice] entity fields to define ObjectBox queries.
class TicketPrice_ {
  /// See [TicketPrice.objId].
  static final objId =
      obx.QueryIntegerProperty<TicketPrice>(_entities[12].properties[0]);

  /// See [TicketPrice.id].
  static final id =
      obx.QueryIntegerProperty<TicketPrice>(_entities[12].properties[1]);

  /// See [TicketPrice.label].
  static final label =
      obx.QueryStringProperty<TicketPrice>(_entities[12].properties[2]);

  /// See [TicketPrice.price].
  static final price =
      obx.QueryDoubleProperty<TicketPrice>(_entities[12].properties[3]);

  /// See [TicketPrice.saleStartDate].
  static final saleStartDate =
      obx.QueryDateNanoProperty<TicketPrice>(_entities[12].properties[4]);

  /// See [TicketPrice.saleEndDate].
  static final saleEndDate =
      obx.QueryDateNanoProperty<TicketPrice>(_entities[12].properties[5]);

  /// See [TicketPrice.priceIncludingTaxesAndFees].
  static final priceIncludingTaxesAndFees =
      obx.QueryDoubleProperty<TicketPrice>(_entities[12].properties[6]);

  /// See [TicketPrice.priceBeforeDiscount].
  static final priceBeforeDiscount =
      obx.QueryDoubleProperty<TicketPrice>(_entities[12].properties[7]);

  /// See [TicketPrice.isDiscounted].
  static final isDiscounted =
      obx.QueryBooleanProperty<TicketPrice>(_entities[12].properties[8]);

  /// See [TicketPrice.taxTotal].
  static final taxTotal =
      obx.QueryDoubleProperty<TicketPrice>(_entities[12].properties[9]);

  /// See [TicketPrice.feeTotal].
  static final feeTotal =
      obx.QueryDoubleProperty<TicketPrice>(_entities[12].properties[10]);

  /// See [TicketPrice.isBeforeSaleStartDate].
  static final isBeforeSaleStartDate =
      obx.QueryBooleanProperty<TicketPrice>(_entities[12].properties[11]);

  /// See [TicketPrice.isAfterSaleEndDate].
  static final isAfterSaleEndDate =
      obx.QueryBooleanProperty<TicketPrice>(_entities[12].properties[12]);

  /// See [TicketPrice.isAvailable].
  static final isAvailable =
      obx.QueryBooleanProperty<TicketPrice>(_entities[12].properties[13]);

  /// See [TicketPrice.isSoldOut].
  static final isSoldOut =
      obx.QueryBooleanProperty<TicketPrice>(_entities[12].properties[14]);

  /// See [TicketPrice.quantityRemaining].
  static final quantityRemaining =
      obx.QueryIntegerProperty<TicketPrice>(_entities[12].properties[15]);
}
